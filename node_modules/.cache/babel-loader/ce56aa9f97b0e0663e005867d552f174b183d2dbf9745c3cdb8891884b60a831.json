{"ast":null,"code":"var _jsxFileName = \"/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/App.js\",\n  _s = $RefreshSig$();\nimport { TodoTitle } from './TodoTitle'; // De esta manera es como importamos los componentes que estamos creando\nimport { TitleCreateExercise } from './CreateExercise';\nimport { CreateExercise } from './CreateExercise';\nimport { ImgExercise } from './ImgExercise';\nimport { SearchExercise } from './TodoItem';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { BotonCreateExercise } from './CreateExercise';\nimport './App.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultExercise = [{\n  text: 'pecho plano',\n  completed: true\n}, {\n  text: 'pecho inclinado',\n  completed: false\n}, {\n  text: 'apertura de pecho',\n  completed: true\n}, {\n  text: 'trapecio',\n  completed: false\n}];\nfunction App() {\n  _s();\n  // Con react las funciones empiezan con una letra mayusculas y estas funciones toman el nombre de complemetos. Lo que hay dentro de la funcion(complemento) se llama elemento, que es una combinacion de sintaxis html con js\n  const [createValue, setCreateValue] = React.useState(''); // Esta es la manera de crear un estado, con una variable que debe llevar entre corchetes dos parametros que seria el valor que se le este dando en tiempo real y el otro parametro seria el actualizador de el anterior estado\n  console.log('Perro flojo ' + createValue); // De esta manera puedo visualizar el restultado en la consola\n\n  const [exercises, setExercises] = React.useState(defaultExercise);\n  const completedExercise = exercises.filter(item => item.completed).length;\n  const totalExercise = exercises.length;\n  const [searchExercise, setSearchExercise] = React.useState();\n  const findExercise = searchExercise.filter(item => item);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TitleCreateExercise, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateExercise, {\n      createValue: createValue // Despues de escribir el estado esta es la manera de concetar componentes hijos al componente padre\n      ,\n      setCreateValue: setCreateValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotonCreateExercise, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      children: [/*#__PURE__*/_jsxDEV(TodoTitle, {\n        completed: completedExercise,\n        total: totalExercise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SearchExercise, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), defaultExercise.map(item =>\n      /*#__PURE__*/\n      // Esta es la manera de trabajar con objetos y sus metodos en react, despues de el componente, debemos indicar una key que concuerde con el objeto que se desea obtener. Al escribir el metodo para obetener el return no es en llaves si no en parentesis\n      _jsxDEV(TodoItem, {\n        text: item.text,\n        completed: item.completed\n      }, item.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(ImgExercise, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n} // En react los complementos de la pagina primero deben estar dentro de un div porque no se pueden devolver todos los componentes de una en el return y otra forma de hacer esto es con <React.Fragment></React.Fragment>\n_s(App, \"3RPgTTriG05w3scbvO0gpsBi5LM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TodoTitle","TitleCreateExercise","CreateExercise","ImgExercise","SearchExercise","TodoList","TodoItem","BotonCreateExercise","React","defaultExercise","text","completed","App","createValue","setCreateValue","useState","console","log","exercises","setExercises","completedExercise","filter","item","length","totalExercise","searchExercise","setSearchExercise","findExercise","map"],"sources":["/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/App.js"],"sourcesContent":["import { TodoTitle } from'./TodoTitle' // De esta manera es como importamos los componentes que estamos creando\nimport { TitleCreateExercise } from './CreateExercise'\nimport { CreateExercise } from'./CreateExercise'\nimport { ImgExercise } from './ImgExercise'\nimport { SearchExercise } from './TodoItem'\nimport { TodoList } from'./TodoList'\nimport { TodoItem } from'./TodoItem'\nimport { BotonCreateExercise } from'./CreateExercise'\nimport './App.css';\nimport React from 'react'\n\nconst defaultExercise = [\n  {text: 'pecho plano', completed: true},\n  {text: 'pecho inclinado', completed:false},\n  {text: 'apertura de pecho', completed: true},\n  {text: 'trapecio', completed: false}\n]\n\nfunction App() { // Con react las funciones empiezan con una letra mayusculas y estas funciones toman el nombre de complemetos. Lo que hay dentro de la funcion(complemento) se llama elemento, que es una combinacion de sintaxis html con js\n  const [createValue, setCreateValue] = React.useState('') // Esta es la manera de crear un estado, con una variable que debe llevar entre corchetes dos parametros que seria el valor que se le este dando en tiempo real y el otro parametro seria el actualizador de el anterior estado\n  console.log('Perro flojo ' + createValue) // De esta manera puedo visualizar el restultado en la consola\n\n  const [exercises, setExercises] = React.useState(defaultExercise)\n  const completedExercise = exercises.filter(item => item.completed).length\n  const totalExercise = exercises.length\n\n  const [searchExercise, setSearchExercise] = React.useState()\n  const findExercise = searchExercise.filter(item => item)\n\n  return (\n    <React.Fragment>\n      \n      <TitleCreateExercise />\n      <CreateExercise\n      createValue={createValue} // Despues de escribir el estado esta es la manera de concetar componentes hijos al componente padre\n      setCreateValue={setCreateValue}\n       />\n      <BotonCreateExercise />\n\n      <TodoList>\n      <TodoTitle completed={completedExercise} \n      total={totalExercise}\n      />\n      \n      <SearchExercise />\n       {defaultExercise.map(item => ( // Esta es la manera de trabajar con objetos y sus metodos en react, despues de el componente, debemos indicar una key que concuerde con el objeto que se desea obtener. Al escribir el metodo para obetener el return no es en llaves si no en parentesis\n        <TodoItem \n        key={item.text} \n        text={item.text} \n        completed={item.completed} \n        />\n       ))}\n       <ImgExercise />\n      </TodoList>\n    </React.Fragment>\n  );\n  } // En react los complementos de la pagina primero deben estar dentro de un div porque no se pueden devolver todos los componentes de una en el return y otra forma de hacer esto es con <React.Fragment></React.Fragment>\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAO,aAAa,EAAC;AACvC,SAASC,mBAAmB,QAAQ,kBAAkB;AACtD,SAASC,cAAc,QAAO,kBAAkB;AAChD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,QAAQ,QAAO,YAAY;AACpC,SAASC,QAAQ,QAAO,YAAY;AACpC,SAASC,mBAAmB,QAAO,kBAAkB;AACrD,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,eAAe,GAAG,CACtB;EAACC,IAAI,EAAE,aAAa;EAAEC,SAAS,EAAE;AAAI,CAAC,EACtC;EAACD,IAAI,EAAE,iBAAiB;EAAEC,SAAS,EAAC;AAAK,CAAC,EAC1C;EAACD,IAAI,EAAE,mBAAmB;EAAEC,SAAS,EAAE;AAAI,CAAC,EAC5C;EAACD,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAE;AAAK,CAAC,CACrC;AAED,SAASC,GAAG,GAAG;EAAA;EAAE;EACf,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,KAAK,CAACO,QAAQ,CAAC,EAAE,CAAC,EAAC;EACzDC,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGJ,WAAW,CAAC,EAAC;;EAE1C,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGX,KAAK,CAACO,QAAQ,CAACN,eAAe,CAAC;EACjE,MAAMW,iBAAiB,GAAGF,SAAS,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACX,SAAS,CAAC,CAACY,MAAM;EACzE,MAAMC,aAAa,GAAGN,SAAS,CAACK,MAAM;EAEtC,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,KAAK,CAACO,QAAQ,EAAE;EAC5D,MAAMY,YAAY,GAAGF,cAAc,CAACJ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC;EAExD,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBAEb,QAAC,mBAAmB;MAAA;MAAA;MAAA;IAAA,QAAG,eACvB,QAAC,cAAc;MACf,WAAW,EAAET,WAAY,CAAC;MAAA;MAC1B,cAAc,EAAEC;IAAe;MAAA;MAAA;MAAA;IAAA,QAC5B,eACH,QAAC,mBAAmB;MAAA;MAAA;MAAA;IAAA,QAAG,eAEvB,QAAC,QAAQ;MAAA,wBACT,QAAC,SAAS;QAAC,SAAS,EAAEM,iBAAkB;QACxC,KAAK,EAAEI;MAAc;QAAA;QAAA;QAAA;MAAA,QACnB,eAEF,QAAC,cAAc;QAAA;QAAA;QAAA;MAAA,QAAG,EAChBf,eAAe,CAACmB,GAAG,CAACN,IAAI;MAAA;MAAM;MAC9B,QAAC,QAAQ;QAET,IAAI,EAAEA,IAAI,CAACZ,IAAK;QAChB,SAAS,EAAEY,IAAI,CAACX;MAAU,GAFrBW,IAAI,CAACZ,IAAI;QAAA;QAAA;QAAA;MAAA,QAId,CAAC,eACF,QAAC,WAAW;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACI;AAEnB,CAAC,CAAC;AAAA,GAtCKE,GAAG;AAAA,KAAHA,GAAG;AAwCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}