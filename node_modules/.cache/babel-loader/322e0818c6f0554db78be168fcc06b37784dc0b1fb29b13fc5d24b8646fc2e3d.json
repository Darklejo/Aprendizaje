{"ast":null,"code":"var _jsxFileName = \"/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/PageContext/ContextGlobal.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useLocalStorage } from \"./useLocalSotorage.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContextGlobal = /*#__PURE__*/React.createContext();\nfunction ExerciseProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  // ESTADOS\n  const {\n    item: exercises,\n    saveItem: saveExercises,\n    loading,\n    error\n  } = useLocalStorage('work-out', []); // Le estoy diciendo que el estado inicial es el array con objetos\n  const [searchExercise, setSearchExercise] = React.useState('');\n  const [openModal, setOpenModal] = React.useState(false); // Para abrir el portal de manera manual seria cambiando el estado de un false a un true\n\n  // ESTADOS DERIVADOS\n\n  const completedExercise = exercises.filter(item => item.completed).length; // Esto es un estado derivado, son variables, calculos etc, que hacemos a traves de un estado, tambien con el metodo filter le estoy diciendo que me devuelva los elementos que cumplan con la condicion\n  const totalExercise = exercises.length;\n  const searchedExercise = exercises.filter(item => {\n    return item.text.toLowerCase().includes(searchExercise.toLocaleLowerCase()); // Con estas dos metodos nuevos en el resultado no importa si lo busco en minuscula o mayuscula. Primero debo convertir tod en minuscula en con el metodo .toLowerCase() y despues lo que este entre parentesis del metodo includes le agrego el metodo .toLocaleLowerCase()\n  });\n\n  const exerciseCompleted = text => {\n    const newExercise = [...exercises];\n    const exerciseIndex = newExercise.findIndex(item => item.text == text);\n    newExercise[exerciseIndex].completed = true;\n    saveExercises(newExercise);\n  };\n  const deletedExercise = text => {\n    const newExercise = [...exercises];\n    const exerciseIndex = newExercise.findIndex(item => item.text == text);\n    newExercise[exerciseIndex].splice(exercises, 1);\n    saveExercises(newExercise);\n  };\n  const addExercise = text => {\n    const newExercise = [...exercises];\n    newExercise.push({\n      text,\n      completed: false\n    });\n    saveExercises(newExercise);\n  };\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      loading,\n      error,\n      completedExercise,\n      totalExercise,\n      searchExercise,\n      setSearchExercise,\n      searchedExercise,\n      exerciseCompleted,\n      deletedExercise,\n      openModal,\n      setOpenModal,\n      addExercise\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(ExerciseProvider, \"OgowhI6/tQ5f7VPrVUYYbleE6ko=\", false, function () {\n  return [useLocalStorage];\n});\n_c = ExerciseProvider;\nexport { ContextGlobal, ExerciseProvider };\nvar _c;\n$RefreshReg$(_c, \"ExerciseProvider\");","map":{"version":3,"names":["React","useLocalStorage","ContextGlobal","createContext","ExerciseProvider","children","item","exercises","saveItem","saveExercises","loading","error","searchExercise","setSearchExercise","useState","openModal","setOpenModal","completedExercise","filter","completed","length","totalExercise","searchedExercise","text","toLowerCase","includes","toLocaleLowerCase","exerciseCompleted","newExercise","exerciseIndex","findIndex","deletedExercise","splice","addExercise","push"],"sources":["/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/PageContext/ContextGlobal.js"],"sourcesContent":["import React from \"react\";\nimport { useLocalStorage } from \"./useLocalSotorage.js\";\n\nconst ContextGlobal = React.createContext()\n\nfunction ExerciseProvider({children}){\n\n    // ESTADOS\n  const {\n    item: exercises, \n    saveItem: saveExercises,\n    loading,\n    error\n  } = useLocalStorage('work-out', []) // Le estoy diciendo que el estado inicial es el array con objetos\n  const [searchExercise, setSearchExercise] = React.useState('')\n  const [openModal, setOpenModal] = React.useState(false) // Para abrir el portal de manera manual seria cambiando el estado de un false a un true\n  \n\n  // ESTADOS DERIVADOS\n\n  const completedExercise = exercises.filter(item => item.completed).length // Esto es un estado derivado, son variables, calculos etc, que hacemos a traves de un estado, tambien con el metodo filter le estoy diciendo que me devuelva los elementos que cumplan con la condicion\n  const totalExercise = exercises.length\n\n  const searchedExercise = exercises.filter((item)=>{\n      return item.text.toLowerCase().includes(searchExercise.toLocaleLowerCase()) // Con estas dos metodos nuevos en el resultado no importa si lo busco en minuscula o mayuscula. Primero debo convertir tod en minuscula en con el metodo .toLowerCase() y despues lo que este entre parentesis del metodo includes le agrego el metodo .toLocaleLowerCase()\n    })\n\n  const exerciseCompleted = (text)=>{\n    const newExercise =[...exercises]\n     const exerciseIndex = newExercise.findIndex(\n      (item) => item.text == text\n     )\n    newExercise[exerciseIndex].completed = true\n    saveExercises(newExercise)\n  }\n\n  const deletedExercise = (text)=>{\n    const newExercise = [...exercises]\n    const exerciseIndex = newExercise.findIndex(\n      (item) => item.text == text\n     )\n    newExercise[exerciseIndex].splice(exercises, 1)\n    saveExercises(newExercise)\n  }\n\n  const addExercise = (text)=>{\n    const newExercise =[...exercises]\n    newExercise.push({\n      text,\n      completed: false\n    })\n    saveExercises(newExercise)\n  }\n\n    return(\n        <ContextGlobal.Provider value={{\n            loading,\n            error,\n            completedExercise,\n            totalExercise,\n            searchExercise,\n            setSearchExercise,\n            searchedExercise,\n            exerciseCompleted,\n            deletedExercise,\n            openModal,\n            setOpenModal,\n            addExercise\n        }}>\n            {children}\n        </ContextGlobal.Provider>\n    )\n}\n\n\nexport { ContextGlobal, ExerciseProvider }"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,uBAAuB;AAAC;AAExD,MAAMC,aAAa,gBAAGF,KAAK,CAACG,aAAa,EAAE;AAE3C,SAASC,gBAAgB,OAAY;EAAA;EAAA,IAAX;IAACC;EAAQ,CAAC;EAEhC;EACF,MAAM;IACJC,IAAI,EAAEC,SAAS;IACfC,QAAQ,EAAEC,aAAa;IACvBC,OAAO;IACPC;EACF,CAAC,GAAGV,eAAe,CAAC,UAAU,EAAE,EAAE,CAAC,EAAC;EACpC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,KAAK,CAACc,QAAQ,CAAC,KAAK,CAAC,EAAC;;EAGxD;;EAEA,MAAMG,iBAAiB,GAAGV,SAAS,CAACW,MAAM,CAACZ,IAAI,IAAIA,IAAI,CAACa,SAAS,CAAC,CAACC,MAAM,EAAC;EAC1E,MAAMC,aAAa,GAAGd,SAAS,CAACa,MAAM;EAEtC,MAAME,gBAAgB,GAAGf,SAAS,CAACW,MAAM,CAAEZ,IAAI,IAAG;IAC9C,OAAOA,IAAI,CAACiB,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACb,cAAc,CAACc,iBAAiB,EAAE,CAAC,EAAC;EAC9E,CAAC,CAAC;;EAEJ,MAAMC,iBAAiB,GAAIJ,IAAI,IAAG;IAChC,MAAMK,WAAW,GAAE,CAAC,GAAGrB,SAAS,CAAC;IAChC,MAAMsB,aAAa,GAAGD,WAAW,CAACE,SAAS,CACzCxB,IAAI,IAAKA,IAAI,CAACiB,IAAI,IAAIA,IAAI,CAC3B;IACFK,WAAW,CAACC,aAAa,CAAC,CAACV,SAAS,GAAG,IAAI;IAC3CV,aAAa,CAACmB,WAAW,CAAC;EAC5B,CAAC;EAED,MAAMG,eAAe,GAAIR,IAAI,IAAG;IAC9B,MAAMK,WAAW,GAAG,CAAC,GAAGrB,SAAS,CAAC;IAClC,MAAMsB,aAAa,GAAGD,WAAW,CAACE,SAAS,CACxCxB,IAAI,IAAKA,IAAI,CAACiB,IAAI,IAAIA,IAAI,CAC3B;IACFK,WAAW,CAACC,aAAa,CAAC,CAACG,MAAM,CAACzB,SAAS,EAAE,CAAC,CAAC;IAC/CE,aAAa,CAACmB,WAAW,CAAC;EAC5B,CAAC;EAED,MAAMK,WAAW,GAAIV,IAAI,IAAG;IAC1B,MAAMK,WAAW,GAAE,CAAC,GAAGrB,SAAS,CAAC;IACjCqB,WAAW,CAACM,IAAI,CAAC;MACfX,IAAI;MACJJ,SAAS,EAAE;IACb,CAAC,CAAC;IACFV,aAAa,CAACmB,WAAW,CAAC;EAC5B,CAAC;EAEC,oBACI,QAAC,aAAa,CAAC,QAAQ;IAAC,KAAK,EAAE;MAC3BlB,OAAO;MACPC,KAAK;MACLM,iBAAiB;MACjBI,aAAa;MACbT,cAAc;MACdC,iBAAiB;MACjBS,gBAAgB;MAChBK,iBAAiB;MACjBI,eAAe;MACfhB,SAAS;MACTC,YAAY;MACZiB;IACJ,CAAE;IAAA,UACG5B;EAAQ;IAAA;IAAA;IAAA;EAAA,QACY;AAEjC;AAAC,GAnEQD,gBAAgB;EAAA,QAQnBH,eAAe;AAAA;AAAA,KARZG,gBAAgB;AAsEzB,SAASF,aAAa,EAAEE,gBAAgB;AAAE;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}