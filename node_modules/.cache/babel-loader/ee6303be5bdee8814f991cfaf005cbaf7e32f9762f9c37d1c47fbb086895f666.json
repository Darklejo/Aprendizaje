{"ast":null,"code":"var _jsxFileName = \"/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/App.js\",\n  _s = $RefreshSig$();\nimport { TodoTitle } from './TodoTitle'; // De esta manera es como importamos los componentes que estamos creando\nimport { TitleCreateExercise } from './CreateExercise';\nimport { CreateExercise } from './CreateExercise';\nimport { ImgExercise } from './ImgExercise';\nimport { SearchExercise } from './TodoItem';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\nimport { BotonCreateExercise } from './CreateExercise';\nimport './App.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultExercise = [{\n  text: 'pecho plano',\n  completed: true\n}, {\n  text: 'pecho inclinado',\n  completed: false\n}, {\n  text: 'apertura de pecho',\n  completed: true\n}, {\n  text: 'paralelas',\n  completed: false\n}, {\n  text: 'trapecio',\n  completed: false\n}];\nfunction App() {\n  _s();\n  // Con react las funciones empiezan con una letra mayusculas y estas funciones toman el nombre de complemetos. Lo que hay dentro de la funcion(complemento) se llama elemento, que es una combinacion de sintaxis html con js\n  const [createValue, setCreateValue] = React.useState(''); // Esta es la manera de crear un estado, con una variable que debe llevar entre corchetes dos parametros que seria el valor que se le este dando en tiempo real y el otro parametro seria el actualizador de el anterior estado\n  //console.log('Agregar exercise ' + createValue) // De esta manera puedo visualizar el restultado en la consola\n\n  const [exercises, setExercises] = React.useState(defaultExercise); // Le estoy diciendo que el estado inicial es el array con objetos\n\n  const completedExercise = exercises.filter(item => item.completed).length; // Esto es un estado derivado, son variables, calculos etc, que hacemos a traves de un estado, tambien con el metodo filter le estoy diciendo que me devuelva los elementos que cumplan con la condicion\n  const totalExercise = exercises.length;\n  const [searchExercise, setSearchExercise] = React.useState('');\n  console.log(searchExercise);\n  const searchedExercise = exercises.filter(item => {\n    item.text.includes(searchExercise);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TitleCreateExercise, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateExercise, {\n      createValue: createValue // Despues de escribir el estado esta es la manera de concetar componentes hijos al componente padre\n      ,\n      setCreateValue: setCreateValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotonCreateExercise, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      children: [/*#__PURE__*/_jsxDEV(TodoTitle, {\n        completed: completedExercise // Aca estoy utilizando el estado derivado creado anteriormente y es la manera de hacerlo un poco mas dinamico\n        ,\n        total: totalExercise // Con otro estado derivado le estoy diciendo cuantos son el total y son lo que estan en el objeto defaultExercise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SearchExercise, {\n        searchedExercise: searchedExercise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), defaultExercise.map(item =>\n      /*#__PURE__*/\n      // Esta es la manera de trabajar con objetos y sus metodos en react, despues de el componente, debemos indicar una key que concuerde con el objeto que se desea obtener. Al escribir el metodo para obetener el return no es en llaves si no en parentesis\n      _jsxDEV(TodoItem, {\n        text: item.text,\n        completed: item.completed\n      }, item.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(ImgExercise, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n} // En react los complementos de la pagina primero deben estar dentro de un div porque no se pueden devolver todos los componentes de una en el return y otra forma de hacer esto es con <React.Fragment></React.Fragment>\n_s(App, \"aDY4MiqxH7ZpL/7jmZmA4Iczyvc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TodoTitle","TitleCreateExercise","CreateExercise","ImgExercise","SearchExercise","TodoList","TodoItem","BotonCreateExercise","React","defaultExercise","text","completed","App","createValue","setCreateValue","useState","exercises","setExercises","completedExercise","filter","item","length","totalExercise","searchExercise","setSearchExercise","console","log","searchedExercise","includes","map"],"sources":["/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/App.js"],"sourcesContent":["import { TodoTitle } from'./TodoTitle' // De esta manera es como importamos los componentes que estamos creando\nimport { TitleCreateExercise } from './CreateExercise'\nimport { CreateExercise } from'./CreateExercise'\nimport { ImgExercise } from './ImgExercise'\nimport { SearchExercise } from './TodoItem'\nimport { TodoList } from'./TodoList'\nimport { TodoItem } from'./TodoItem'\nimport { BotonCreateExercise } from'./CreateExercise'\nimport './App.css';\nimport React from 'react'\n\nconst defaultExercise = [\n  {text: 'pecho plano', completed: true},\n  {text: 'pecho inclinado', completed:false},\n  {text: 'apertura de pecho', completed: true},\n  {text: 'paralelas', completed: false},\n  {text: 'trapecio', completed: false}\n]\n\nfunction App() { // Con react las funciones empiezan con una letra mayusculas y estas funciones toman el nombre de complemetos. Lo que hay dentro de la funcion(complemento) se llama elemento, que es una combinacion de sintaxis html con js\n  const [createValue, setCreateValue] = React.useState('') // Esta es la manera de crear un estado, con una variable que debe llevar entre corchetes dos parametros que seria el valor que se le este dando en tiempo real y el otro parametro seria el actualizador de el anterior estado\n  //console.log('Agregar exercise ' + createValue) // De esta manera puedo visualizar el restultado en la consola\n\n  const [exercises, setExercises] = React.useState(defaultExercise) // Le estoy diciendo que el estado inicial es el array con objetos\n\n  const completedExercise = exercises.filter(item => item.completed).length // Esto es un estado derivado, son variables, calculos etc, que hacemos a traves de un estado, tambien con el metodo filter le estoy diciendo que me devuelva los elementos que cumplan con la condicion\n  const totalExercise = exercises.length\n\n  const [searchExercise, setSearchExercise] = React.useState('')\n  console.log(searchExercise)\n\n  const searchedExercise = exercises.filter(\n    (item)=>{\n       item.text.includes(searchExercise)\n    })\n\n  return (\n    <React.Fragment>\n      \n      <TitleCreateExercise />\n      <CreateExercise\n      createValue={createValue} // Despues de escribir el estado esta es la manera de concetar componentes hijos al componente padre\n      setCreateValue={setCreateValue}\n       />\n      <BotonCreateExercise />\n\n      <TodoList>\n      <TodoTitle completed={completedExercise} // Aca estoy utilizando el estado derivado creado anteriormente y es la manera de hacerlo un poco mas dinamico\n      total={totalExercise} // Con otro estado derivado le estoy diciendo cuantos son el total y son lo que estan en el objeto defaultExercise\n      />\n      \n      <SearchExercise\n      searchedExercise={searchedExercise}\n      />\n       {defaultExercise.map(item => ( // Esta es la manera de trabajar con objetos y sus metodos en react, despues de el componente, debemos indicar una key que concuerde con el objeto que se desea obtener. Al escribir el metodo para obetener el return no es en llaves si no en parentesis\n        <TodoItem \n        key={item.text} \n        text={item.text} \n        completed={item.completed} \n        />\n       ))}\n       <ImgExercise />\n      </TodoList>\n    </React.Fragment>\n  );\n  } // En react los complementos de la pagina primero deben estar dentro de un div porque no se pueden devolver todos los componentes de una en el return y otra forma de hacer esto es con <React.Fragment></React.Fragment>\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAO,aAAa,EAAC;AACvC,SAASC,mBAAmB,QAAQ,kBAAkB;AACtD,SAASC,cAAc,QAAO,kBAAkB;AAChD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,QAAQ,QAAO,YAAY;AACpC,SAASC,QAAQ,QAAO,YAAY;AACpC,SAASC,mBAAmB,QAAO,kBAAkB;AACrD,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,eAAe,GAAG,CACtB;EAACC,IAAI,EAAE,aAAa;EAAEC,SAAS,EAAE;AAAI,CAAC,EACtC;EAACD,IAAI,EAAE,iBAAiB;EAAEC,SAAS,EAAC;AAAK,CAAC,EAC1C;EAACD,IAAI,EAAE,mBAAmB;EAAEC,SAAS,EAAE;AAAI,CAAC,EAC5C;EAACD,IAAI,EAAE,WAAW;EAAEC,SAAS,EAAE;AAAK,CAAC,EACrC;EAACD,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAE;AAAK,CAAC,CACrC;AAED,SAASC,GAAG,GAAG;EAAA;EAAE;EACf,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,KAAK,CAACO,QAAQ,CAAC,EAAE,CAAC,EAAC;EACzD;;EAEA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,KAAK,CAACO,QAAQ,CAACN,eAAe,CAAC,EAAC;;EAElE,MAAMS,iBAAiB,GAAGF,SAAS,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACT,SAAS,CAAC,CAACU,MAAM,EAAC;EAC1E,MAAMC,aAAa,GAAGN,SAAS,CAACK,MAAM;EAEtC,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,KAAK,CAACO,QAAQ,CAAC,EAAE,CAAC;EAC9DU,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;EAE3B,MAAMI,gBAAgB,GAAGX,SAAS,CAACG,MAAM,CACtCC,IAAI,IAAG;IACLA,IAAI,CAACV,IAAI,CAACkB,QAAQ,CAACL,cAAc,CAAC;EACrC,CAAC,CAAC;EAEJ,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBAEb,QAAC,mBAAmB;MAAA;MAAA;MAAA;IAAA,QAAG,eACvB,QAAC,cAAc;MACf,WAAW,EAAEV,WAAY,CAAC;MAAA;MAC1B,cAAc,EAAEC;IAAe;MAAA;MAAA;MAAA;IAAA,QAC5B,eACH,QAAC,mBAAmB;MAAA;MAAA;MAAA;IAAA,QAAG,eAEvB,QAAC,QAAQ;MAAA,wBACT,QAAC,SAAS;QAAC,SAAS,EAAEI,iBAAkB,CAAC;QAAA;QACzC,KAAK,EAAEI,aAAc,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACpB,eAEF,QAAC,cAAc;QACf,gBAAgB,EAAEK;MAAiB;QAAA;QAAA;QAAA;MAAA,QACjC,EACAlB,eAAe,CAACoB,GAAG,CAACT,IAAI;MAAA;MAAM;MAC9B,QAAC,QAAQ;QAET,IAAI,EAAEA,IAAI,CAACV,IAAK;QAChB,SAAS,EAAEU,IAAI,CAACT;MAAU,GAFrBS,IAAI,CAACV,IAAI;QAAA;QAAA;QAAA;MAAA,QAId,CAAC,eACF,QAAC,WAAW;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QACL;EAAA;IAAA;IAAA;IAAA;EAAA,QACI;AAEnB,CAAC,CAAC;AAAA,GA9CKE,GAAG;AAAA,KAAHA,GAAG;AAgDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}