{"ast":null,"code":"var _jsxFileName = \"/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { TodoTitle } from './TodoTitle'; // De esta manera es como importamos los componentes que estamos creando\nimport { TitleCreateExercise } from './CreateExercise';\nimport { CreateExercise } from './CreateExercise';\nimport { ImgExercise } from './ImgExercise';\nimport { SearchExercise } from './TodoItem';\nimport { TodoList } from './TodoList';\nimport { TodoItem } from './TodoItem';\n// import { BotonCreateExercise } from'./CreateExercise'\nimport './App.css';\nimport React from 'react';\n\n// LISTA DE EJERCICIOS\n\n// const defaultExercise = [\n//   {text: 'pecho plano', completed: false},\n//   {text: 'pecho inclinado', completed:false},\n//   {text: 'apertura de pecho', completed: false},\n//   {text: 'paralelas', completed: false},\n//   {text: 'trapecio', completed: false},\n// ]\n// localStorage.setItem('work-out', JSON.stringify(defaultExercise))\n\n// CUSTOM HOOK\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useLocalStorage(itemName, intialValue) {\n  _s();\n  // LOCAL STORAGE\n\n  const localStorageItem = localStorage.getItem(itemName);\n  let parsedItem;\n  if (!localStorageItem) {\n    localStorage.setItem(itemName, JSON.stringify(intialValue));\n    parsedItem = intialValue;\n  } else {\n    parsedItem = JSON.parse(localStorageItem);\n  }\n  const [item, setItem] = React.useState(parsedItem);\n  const saveItem = newItem => {\n    // Esta funcion actualiza el estado y el localStorage\n    localStorage.setItem(itemName, JSON.stringify(newItem));\n    setItem(newItem);\n  };\n  return [item, saveItem];\n}\n_s(useLocalStorage, \"B/C+yLGYasz+SPGAkvc/DI3mWM8=\");\nfunction App() {\n  _s2();\n  // ESTADOS\n\n  const [createValue, setCreateValue] = React.useState(''); // Esta es la manera de crear un estado, con una variable que debe llevar entre corchetes dos parametros que seria el valor que se le este dando en tiempo real y el otro parametro seria el actualizador de el anterior estado\n  //console.log('Agregar exercise ' + createValue) // De esta manera puedo visualizar el restultado en la consola\n  const [exercises, saveExercises] = useLocalStorage('work-out', []); // Le estoy diciendo que el estado inicial es el array con objetos\n  const [searchExercise, setSearchExercise] = React.useState('');\n  //console.log(searchExercise)\n\n  // ESTADOS DERIVADOS\n\n  const completedExercise = exercises.filter(item => item.completed).length; // Esto es un estado derivado, son variables, calculos etc, que hacemos a traves de un estado, tambien con el metodo filter le estoy diciendo que me devuelva los elementos que cumplan con la condicion\n  const totalExercise = exercises.length;\n  const searchedExercise = exercises.filter(item => {\n    return item.text.toLowerCase().includes(searchExercise.toLocaleLowerCase()); // Con estas dos metodos nuevos en el resultado no importa si lo busco en minuscula o mayuscula. Primero debo convertir tod en minuscula en con el metodo .toLowerCase() y despues lo que este entre parentesis del metodo includes le agrego el metodo .toLocaleLowerCase()\n  });\n\n  const exerciseCompleted = text => {\n    const newExercise = [...exercises];\n    const exerciseIndex = newExercise.findIndex(item => item.text == text);\n    newExercise[exerciseIndex].completed = true;\n    saveExercises(newExercise);\n  };\n  const deltedExercise = () => {\n    const newExercise = [...exercises];\n    newExercise.splice(exercises, 1);\n    saveExercises(newExercise);\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TitleCreateExercise, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateExercise, {\n      createValue: createValue // Despues de escribir el estado esta es la manera de concetar componentes hijos al componente padre\n      ,\n      setCreateValue: setCreateValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoTitle, {\n      completed: completedExercise // Aca estoy utilizando el estado derivado creado anteriormente y es la manera de hacerlo un poco mas dinamico\n      ,\n      total: totalExercise // Con otro estado derivado le estoy diciendo cuantos son el total y son lo que estan en el objeto defaultExercise\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchExercise, {\n      searchExercise: searchExercise,\n      setSearchExercise: setSearchExercise\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      children: [searchedExercise.map(item =>\n      /*#__PURE__*/\n      // Esta es la manera de trabajar con arrays, sus objetos y su manipulacion en react, despues de el componente, debemos indicar una key que concuerde con el objeto que se desea obtener. Al escribir el metodo para obetener el return no es en llaves si no en parentesis. Estoy ejecutando un estado derivado para poder filtrar el resultado que deseo\n      _jsxDEV(TodoItem, {\n        text: item.text,\n        completed: item.completed,\n        onCompleted: () => exerciseCompleted(item.text) // Se debe ejecutar como una funcion dentro de otra funcion para que no se rompa la aplicacion\n        ,\n        onDeleted: () => deltedExercise(item.text)\n        // addedExercises={() => addedExercise(item.text)}\n      }, item.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(ImgExercise, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this) // Esto es indispensable o sino el codigo se rompe, todos los componentes deben ir dentro de una etiqueta para poderse renderizar y este es la forma que nos da React para solucionar eso\n  ;\n} // En react los complementos de la pagina primero deben estar dentro de un div porque no se pueden devolver todos los componentes de una en el return y otra forma de hacer esto es con <React.Fragment></React.Fragment>\n_s2(App, \"klxN2MWbUmeNC+lH19HrgtjdgKw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport { App };\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TodoTitle","TitleCreateExercise","CreateExercise","ImgExercise","SearchExercise","TodoList","TodoItem","React","useLocalStorage","itemName","intialValue","localStorageItem","localStorage","getItem","parsedItem","setItem","JSON","stringify","parse","item","useState","saveItem","newItem","App","createValue","setCreateValue","exercises","saveExercises","searchExercise","setSearchExercise","completedExercise","filter","completed","length","totalExercise","searchedExercise","text","toLowerCase","includes","toLocaleLowerCase","exerciseCompleted","newExercise","exerciseIndex","findIndex","deltedExercise","splice","map"],"sources":["/home/juanjomxm314/personalProjects/projectOneReact/curso-react-intro/src/App.js"],"sourcesContent":["import { TodoTitle } from'./TodoTitle' // De esta manera es como importamos los componentes que estamos creando\nimport { TitleCreateExercise } from './CreateExercise'\nimport { CreateExercise } from'./CreateExercise'\nimport { ImgExercise } from './ImgExercise'\nimport { SearchExercise } from './TodoItem'\nimport { TodoList } from'./TodoList'\nimport { TodoItem } from'./TodoItem'\n// import { BotonCreateExercise } from'./CreateExercise'\nimport './App.css';\nimport React from 'react'\n\n// LISTA DE EJERCICIOS\n\n// const defaultExercise = [\n//   {text: 'pecho plano', completed: false},\n//   {text: 'pecho inclinado', completed:false},\n//   {text: 'apertura de pecho', completed: false},\n//   {text: 'paralelas', completed: false},\n//   {text: 'trapecio', completed: false},\n// ]\n// localStorage.setItem('work-out', JSON.stringify(defaultExercise))\n\n// CUSTOM HOOK\n\nfunction useLocalStorage(itemName, intialValue){\n    // LOCAL STORAGE\n\n    const localStorageItem = localStorage.getItem(itemName)\n    let parsedItem\n  \n    if(!localStorageItem){\n      localStorage.setItem(itemName, JSON.stringify(intialValue))\n      parsedItem = intialValue\n    } else{\n      parsedItem = JSON.parse(localStorageItem)\n    }\n\n    const [item, setItem] = React.useState(parsedItem)\n  \n    const saveItem = (newItem)=>{ // Esta funcion actualiza el estado y el localStorage\n      localStorage.setItem(itemName, JSON.stringify(newItem))\n      setItem(newItem)\n    }\n    return [item, saveItem]\n}\n\nfunction App() { \n\n  // ESTADOS\n\n  const [createValue, setCreateValue] = React.useState('') // Esta es la manera de crear un estado, con una variable que debe llevar entre corchetes dos parametros que seria el valor que se le este dando en tiempo real y el otro parametro seria el actualizador de el anterior estado\n  //console.log('Agregar exercise ' + createValue) // De esta manera puedo visualizar el restultado en la consola\n  const [exercises, saveExercises] = useLocalStorage('work-out', []) // Le estoy diciendo que el estado inicial es el array con objetos\n  const [searchExercise, setSearchExercise] = React.useState('')\n  //console.log(searchExercise)\n\n  // ESTADOS DERIVADOS\n\n  const completedExercise = exercises.filter(item => item.completed).length // Esto es un estado derivado, son variables, calculos etc, que hacemos a traves de un estado, tambien con el metodo filter le estoy diciendo que me devuelva los elementos que cumplan con la condicion\n  const totalExercise = exercises.length\n\n  const searchedExercise = exercises.filter((item)=>{\n      return item.text.toLowerCase().includes(searchExercise.toLocaleLowerCase()) // Con estas dos metodos nuevos en el resultado no importa si lo busco en minuscula o mayuscula. Primero debo convertir tod en minuscula en con el metodo .toLowerCase() y despues lo que este entre parentesis del metodo includes le agrego el metodo .toLocaleLowerCase()\n    })\n\n  const exerciseCompleted = (text)=>{\n    const newExercise =[...exercises]\n     const exerciseIndex = newExercise.findIndex(\n      (item) => item.text == text\n     )\n    newExercise[exerciseIndex].completed = true\n    saveExercises(newExercise)\n  }\n\n  const deltedExercise = ()=>{\n    const newExercise =[...exercises]\n    newExercise.splice(exercises, 1)\n    saveExercises(newExercise)\n  }\n\n\n  return (\n    <React.Fragment> \n      <TitleCreateExercise />\n      <CreateExercise\n      createValue={createValue} // Despues de escribir el estado esta es la manera de concetar componentes hijos al componente padre\n      setCreateValue={setCreateValue}\n      />\n      \n      <TodoTitle completed={completedExercise} // Aca estoy utilizando el estado derivado creado anteriormente y es la manera de hacerlo un poco mas dinamico\n      total={totalExercise} // Con otro estado derivado le estoy diciendo cuantos son el total y son lo que estan en el objeto defaultExercise\n      />\n      <SearchExercise\n      searchExercise={searchExercise}\n      setSearchExercise={setSearchExercise}\n      />\n\n      <TodoList>\n       {searchedExercise.map(item => ( // Esta es la manera de trabajar con arrays, sus objetos y su manipulacion en react, despues de el componente, debemos indicar una key que concuerde con el objeto que se desea obtener. Al escribir el metodo para obetener el return no es en llaves si no en parentesis. Estoy ejecutando un estado derivado para poder filtrar el resultado que deseo\n        <TodoItem \n        key={item.text} \n        text={item.text} \n        completed={item.completed}\n        onCompleted={() => exerciseCompleted(item.text)} // Se debe ejecutar como una funcion dentro de otra funcion para que no se rompa la aplicacion\n        onDeleted={() => deltedExercise(item.text)}\n        // addedExercises={() => addedExercise(item.text)}\n        />\n       ))}\n      <ImgExercise />\n      </TodoList>\n    </React.Fragment> // Esto es indispensable o sino el codigo se rompe, todos los componentes deben ir dentro de una etiqueta para poderse renderizar y este es la forma que nos da React para solucionar eso\n  );\n  } // En react los complementos de la pagina primero deben estar dentro de un div porque no se pueden devolver todos los componentes de una en el return y otra forma de hacer esto es con <React.Fragment></React.Fragment>\n\n  export {App}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}